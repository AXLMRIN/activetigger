services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: ${RESTART_POLICY}
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ${DATA_PATH}/postgresql/:/var/lib/postgresql/data
  api:
    build:
      context: ./api
      dockerfile: ./Dockerfile
      args:
        - PYTHON_VERSION=${PYTHON_VERSION}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    entrypoint: /entrypoint.sh
    restart: ${RESTART_POLICY}
    depends_on:
      - postgres
    volumes:
      - ${PROJECT_PATH}/docker/api/entrypoint.sh:/entrypoint.sh
      - ${PROJECT_PATH}/api:/api
      - ${DATA_PATH}/models:/api/models
      - ${DATA_PATH}/projects:/api/projects
      - ${PROJECT_PATH}/docker/api/venv:/home/python/venv
    env_file: ".env"
    environment:
      - DATA_PATH=/api
      - GPU=false
  frontend:
    image: node:${NODE_VERSION}
    entrypoint: /entrypoint.sh
    user: node
    restart: ${RESTART_POLICY}
    volumes:
      - ${PROJECT_PATH}/docker/frontend/entrypoint.sh:/entrypoint.sh
      - ${PROJECT_PATH}/frontend:/frontend
    environment:
      - API_PORT=${API_PORT}
      - MODE=${MODE}
      - VITE_API_URL=${API_URL}
  nginx:
    image: nginx:${NGINX_VERSION}
    restart: ${RESTART_POLICY}
    ports:
      - ${NGINX_PORT}:80
    depends_on:
      - api
      - frontend
    volumes:
      - ${PROJECT_PATH}/docker/nginx.${MODE}.conf:/etc/nginx/conf.d/default.conf
      - ${PROJECT_PATH}/frontend/dist:/var/www/frontend
      - ${DATA_PATH}/projects/static:/api/static
